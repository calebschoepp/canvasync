@startuml Notebook Owner Adding a new Canvas
title Notebook Owner Adding a new Canvas
skinparam sequenceMessageAlign center
legend top
Owner and participant have logged in and opened the same notebook.
endlegend

actor Owner as owner
participant NotebookComponent as onc
participant PageComponent as opc
participant PaperJs as opjs
participant PageChannel as pch
participant Page as pm
database Database as db
participant NotebookComponent as pnc
participant PageComponent as ppc
participant PaperJs as ppjs
actor Participant as partic

owner -> onc : clicks "Add Canvas Button"
onc -> onc : setPage(page)

onc -> opc : render()
opc -> opjs : new PaperScope()
opc <-- opjs : return scope
opc -> opjs : new Layer()
opc <-- opjs : return owner_layer
opc -> opjs : addLayer(owner_layer)
opc <-- opjs : adds owner_layer to scope
opc -> opc : setPaperScope(scope)
opc -> opc : setOwnerLayer(owner_layer)

owner <-- onc : render new page

onc -> onc : transmitNewCanvas()
onc -> pch : send(new_page)
pch -> pm : new(page_number, notebook_id)
pch <-- pm : return page
pch -> pm : save()
pm -> db : save page to database

pch -> onc : received(page)
onc -> onc : ignore echoed page

pch -> pnc : received(page)
pnc -> pnc : setPage(page)

pnc -> ppc : render()
ppc -> ppjs : new PaperScope()
ppc <-- ppjs : return scope
ppc -> ppjs : new Layer()
ppc <-- ppjs : return owner_layer
ppc -> ppjs : addLayer(owner_layer)
ppc -> ppjs : new Layer()
ppc <-- ppjs : return participant_layer
ppc -> ppjs : addLayer(participant_layer)
ppc <-- ppjs : adds owner_layer to scope
ppc -> ppc : setPaperScope(scope)
ppc -> ppc : setOwnerLayer(owner_layer)
ppc -> ppc : setParticipantLayer(owner_layer)

partic <-- pnc : render new page

@enduml